<?php
date_default_timezone_set('Europe/Vilnius');

define('TELEGRAM_TOKEN', '8124088742:AAEreYU0mGVfzBR0svtcuYaXcMuPjR8EomA');
define('ADMIN_CHAT_ID', 5565195813);
define('USDT_ADDRESS', '0x7d57aD24b58E5926B55cBc03D64a0BB2fFa0Bdb6');
define('PRICE_PER_RECEIPT', 5);

define('PAYMENTS_FILE', __DIR__ . '/storage/payments.json');
define('USER_DATA_FILE', __DIR__ . '/users.json');
define('LOG_FILE', __DIR__ . '/log.txt');

// --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ ---
function loadPayments() {
    if (!file_exists(PAYMENTS_FILE)) {
        file_put_contents(PAYMENTS_FILE, json_encode([]));
    }
    $data = file_get_contents(PAYMENTS_FILE);
    return json_decode($data, true) ?: [];
}

function savePayments($payments) {
    file_put_contents(PAYMENTS_FILE, json_encode($payments, JSON_PRETTY_PRINT));
}

function loadUsers() {
    if (!file_exists(USER_DATA_FILE)) {
        file_put_contents(USER_DATA_FILE, json_encode([]));
    }
    $data = file_get_contents(USER_DATA_FILE);
    return json_decode($data, true) ?: [];
}

function saveUsers($users) {
    file_put_contents(USER_DATA_FILE, json_encode($users, JSON_PRETTY_PRINT));
}

function logMessage($msg) {
    file_put_contents(LOG_FILE, date('[Y-m-d H:i:s] ') . $msg . PHP_EOL, FILE_APPEND);
}

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ---
function sendMessage($chat_id, $text, $buttons = null) {
    $url = "https://api.telegram.org/bot" . TELEGRAM_TOKEN . "/sendMessage";
    $data = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => 'HTML',
    ];
    if ($buttons !== null) {
        // –Ø–∫—â–æ —Ü–µ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚Äî –∫–æ–¥—É—î–º–æ –≤ JSON
        $data['reply_markup'] = json_encode($buttons);
    }
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $result = curl_exec($ch);
    curl_close($ch);
    logMessage("Send to $chat_id: $text");
    return $result;
}


// --- –í–∞–ª–∏–¥–∞—Ü–∏—è email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
function is_valid_email($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
}

function sendContactRequest($chat_id) {
    $keyboard = [
        'keyboard' => [
            [
                ['text' => 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', 'request_contact' => true]
            ]
        ],
        'resize_keyboard' => true,
        'one_time_keyboard' => true
    ];

    $data = [
        'chat_id' => $chat_id,
        'text' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'reply_markup' => json_encode($keyboard)
    ];

    file_get_contents("https://api.telegram.org/bot8124088742:AAEreYU0mGVfzBR0svtcuYaXcMuPjR8EomA/sendMessage?" . http_build_query($data));
}



// --- –ö–Ω–æ–ø–∫–∏ ---
function languageButtons() {
    return [
        'keyboard' => [['RU', 'EN']],
        'resize_keyboard' => true,
        'one_time_keyboard' => true,
    ];
}

function yesNoButtons($lang) {
    if ($lang === 'ru') {
        return [
            'keyboard' => [['–î–∞', '–ù–µ—Ç']],
            'resize_keyboard' => true,
            'one_time_keyboard' => true,
        ];
    }
    return [
        'keyboard' => [['Yes', 'No']],
        'resize_keyboard' => true,
        'one_time_keyboard' => true,
    ];
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

$payments = loadPayments();
$users = loadUsers();

$input = json_decode(file_get_contents('php://input'), true);
logMessage("Received update: " . json_encode($input));
$callback = $input['callback_query'] ?? null;

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback ---
if ($callback_query) {
    $data = $callback_query['data'];
    $callback_id = $callback_query['id'];
    $admin_id = $callback_query['from']['id'];

    if ($admin_id == ADMIN_CHAT_ID) {
        if (strpos($data, 'approve_payment:') === 0) {
            $uid = substr($data, strlen('approve_payment:'));
            global $payments;
            if (isset($payments[$uid])) {
                $payments[$uid]['status'] = 'approved';
                savePayments($payments);

                sendMessage($payments[$uid]['chat_id'], "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–≤–∏—Ç–∞–Ω—Ü–∏–π.");
                sendMessage(ADMIN_CHAT_ID, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $uid –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.");

                answerCallback($callback_id, '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
            }
            exit;
        }

        if (strpos($data, 'reject_payment:') === 0) {
            $uid = substr($data, strlen('reject_payment:'));
            global $payments;
            if (isset($payments[$uid])) {
                $payments[$uid]['status'] = 'rejected';
                savePayments($payments);

                sendMessage($payments[$uid]['chat_id'], "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.");
                sendMessage(ADMIN_CHAT_ID, "‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $uid –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");

                answerCallback($callback_id, '–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
            }
            exit;
        }
    } else {
        answerCallback($callback_id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.', true);
        exit;
    }
}

function answerCallback($callback_id, $text, $show_alert = false) {
    $url = "https://api.telegram.org/bot" . TELEGRAM_TOKEN . "/answerCallbackQuery";
    $post = [
        'callback_query_id' => $callback_id,
        'text' => $text,
        'show_alert' => $show_alert,
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_exec($ch);
    curl_close($ch);
}


if (!isset($input['message'])) {
    exit;
}

$message = $input['message'];
$chat_id = $message['chat']['id'] ?? null;
$user_id = $message['from']['id'] ?? null;
$text = trim($message['text'] ?? '');
$now = time();

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π
foreach ($users as $uid => $userdata) {
    if (isset($userdata['last_activity']) && ($now - $userdata['last_activity']) > 900) {
        unset($users[$uid]);
        logMessage("User $uid session cleared due to inactivity.");
    }
}
saveUsers($users);

if ($user_id) {
    $users[$user_id]['last_activity'] = $now;
    saveUsers($users);
}

if (!isset($users[$user_id])) {
    $users[$user_id] = [
        'step' => 'start',
        'language' => null,
        'history' => [],
    ];
    saveUsers($users);
}

$step = $users[$user_id]['step'];
$lang = $users[$user_id]['language'] ?? null;

if ($text === '/start') {
    $users[$user_id]['step'] = 'choose_language';
    saveUsers($users);
    sendMessage($chat_id, "Please choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", languageButtons());
    exit;
}

switch ($step) {
    case 'choose_language':
        $lang_input = strtoupper($text);
        if ($lang_input !== 'RU' && $lang_input !== 'EN') {
            sendMessage($chat_id, "Please choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", languageButtons());
            break;
        }
        $lang = strtolower($lang_input);
        $users[$user_id]['language'] = $lang;
        $users[$user_id]['step'] = 'enter_name';
        saveUsers($users);
        sendMessage($chat_id, $lang === 'ru' ? "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é." : "You chose English. Please enter your full name.");
        break;

    case 'enter_name':
    if (mb_strlen($text) < 3) {
        sendMessage($chat_id, $lang === 'ru' ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é." : "Please enter a valid full name.");
        break;
    }

    $users[$user_id]['name'] = $text;
    $users[$user_id]['step'] = 'wait_phone';
    saveUsers($users);

    sendContactRequest($chat_id); // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É
    break;

case 'wait_phone':
    if (isset($update['message']['contact'])) {
        $contact = $update['message']['contact'];
        $phone = $contact['phone_number'];

        $users[$user_id]['phone'] = $phone;
        $users[$user_id]['step'] = 'enter_email';
        saveUsers($users);

        sendMessage($chat_id, $lang === 'ru'
            ? "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."
            : "Contact received. Now enter your email address.");
    } else {
        sendMessage($chat_id, $lang === 'ru'
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
            : "Please press the button below and share your contact.");
        sendContactRequest($chat_id);
    }
    break;



        $users[$user_id]['phone'] = $text;
        $users[$user_id]['step'] = 'enter_email';
        saveUsers($users);
        sendMessage($chat_id, $lang === 'ru' ? "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã." : "Enter your email address.");
        break;

    case 'enter_email':
        if (!is_valid_email($text)) {
            sendMessage($chat_id, $lang === 'ru' ? "–ù–µ–≤–µ—Ä–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." : "Invalid email. Try again.");
            break;
        }
        $users[$user_id]['email'] = $text;
        $users[$user_id]['step'] = 'enter_receipt_count';
        saveUsers($users);
        sendMessage($chat_id, $lang === 'ru' ? "–°–∫–æ–ª—å–∫–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?" : "How many receipts do you want to check?");
        break;

    case 'enter_receipt_count':
        if (!is_numeric($text) || intval($text) < 1) {
            sendMessage($chat_id, $lang === 'ru' ? "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0." : "Enter a number greater than 0.");
            break;
        }
        $count = intval($text);
        $users[$user_id]['receipt_count'] = $count;
        $users[$user_id]['step'] = 'confirm_payment';
        saveUsers($users);

        $sum = $count * PRICE_PER_RECEIPT;
        $msg = $lang === 'ru'
            ? "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º 5$. –í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: $sum USDT.\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
            : "The cost to check one receipt with detailed analysis is $5. Total amount: $sum USDT.\nDo you want to continue?";
        sendMessage($chat_id, $msg, yesNoButtons($lang));
        break;

    case 'confirm_payment':
        $answer = mb_strtolower($text);
        if (($lang === 'ru' && $answer === '–¥–∞') || ($lang === 'en' && $answer === 'yes')) {
            $users[$user_id]['step'] = 'waiting_for_payment';
            saveUsers($users);
            $sum = $users[$user_id]['receipt_count'] * PRICE_PER_RECEIPT;
            $msg = $lang === 'ru'
                ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ $sum USDT –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>" . USDT_ADDRESS . "</code>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                : "Please send $sum USDT to the following address:\n<code>" . USDT_ADDRESS . "</code>\n\nAfter payment, click the button below:";
            sendMessage($chat_id, $msg, [
                'keyboard' => [
                    [$lang === 'ru' ? '–Ø –æ–ø–ª–∞—Ç–∏–ª' : 'I have paid']
                ],
                'resize_keyboard' => true,
                'one_time_keyboard' => true,
            ]);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π
$payments[$user_id] = [
    'chat_id' => $chat_id,
    'amount' => $sum,
    'status' => 'pending',
    'timestamp' => time(),
];
savePayments($payments);
break;

default:
    sendMessage($chat_id, $lang === 'ru'
        ? "–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        : "Payment cancelled. Type /start to begin again.");
    unset($users[$user_id]);
    saveUsers($users);
    break;


   case 'waiting_for_payment':
    $confirm_text = $lang === 'ru' ? '—è –æ–ø–ª–∞—Ç–∏–ª' : 'i have paid';
    if (mb_strtolower($text) === $confirm_text) {
        sendMessage($chat_id, $lang === 'ru'
            ? "–°–ø–∞—Å–∏–±–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–Ω—ã:\n- –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TXID)\n- –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n- –î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
            : "Thank you!\nPlease attach a photo or screenshot of the transaction that clearly shows:\n- Transaction hash (TXID)\n- Amount sent\n- Date of the transaction\nThis is required to confirm your payment.");
    }
    break;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            $payments[$user_id] = [
                'status' => 'pending',
                'chat_id' => $chat_id,
                'amount' => $users[$user_id]['receipt_count'] * PRICE_PER_RECEIPT,
                'timestamp' => time(),
            ];
            savePayments($payments);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   $approveKeyboard = [
    'inline_keyboard' => [
        [
            ['text' => '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'callback_data' => 'approve_payment:' . $user_id],
            ['text' => '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'callback_data' => 'reject_payment:' . $user_id]
        ]
    ]
];

sendPhoto($adminId, $file_id, "–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>$user_id</b>.", $approveKeyboard);
    sendMessage($chat_id, "üì§ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.");
    break;
}

if (isset($data['callback_query'])) {
    $callback = $data['callback_query'];
    $data_parts = explode(':', $callback['data']);
    $action = $data_parts[0];
    $user_id = $data_parts[1];

    if ($action === 'approve_payment') {
        sendMessage($user_id, "‚úÖ –û–ø–ª–∞—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! üí∏\nUSDT –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: <code>$usdtWallet</code>");
        sendMessage($adminId, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>$user_id</b> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.");
    } elseif ($action === 'reject_payment') {
        sendMessage($user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ ");
        sendMessage($adminId, "‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>$user_id</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
    }

        break;

   case 'upload_receipts':
    if (isset($message['photo'])) {
        $photo = end($message['photo']);
        $file_id = $photo['file_id'];

        $postData = [
            'chat_id' => ADMIN_CHAT_ID,
            'photo' => $file_id,
            'caption' => "–§–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π $user_id"
        ];

        $ch = curl_init("https://api.telegram.org/bot" . TELEGRAM_TOKEN . "/sendPhoto");
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_exec($ch);
        curl_close($ch);

        sendMessage(ADMIN_CHAT_ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $user_id –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.");
    } elseif (!empty($text)) {
        sendMessage(ADMIN_CHAT_ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $user_id –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n" . $text);
    }

    sendMessage($chat_id, $lang === 'ru'
        ? "–°–ø–∞—Å–∏–±–æ! –ö–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞."
        : "Thank you! Receipts sent for review. We will get back to you after analysis.");

    unset($users[$user_id]);
    saveUsers($users);
    break;

default:
    sendMessage($chat_id, $lang === 'ru' ? "–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ." : "Type /start to begin again.");
    break;
